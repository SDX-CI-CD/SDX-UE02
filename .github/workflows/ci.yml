# GitHub Actions CI Workflow for SDX-UE02
# This pipeline follows the required assignment structure strictly.
# It uses both single-arch and multi-arch Docker builds appropriately.

name: CI

on:
  push:
    branches:
      - "main"

jobs:
  lint:
    name: Lint Go and Dockerfile
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Set up Go 1.19
        # Use Go 1.19 to match the project source compatibility
        uses: actions/setup-go@v4
        with:
          go-version: '1.19'

      - name: Run golangci-lint
        # Run linter on Go code inside ./src
        uses: golangci/golangci-lint-action@v3
        with:
          version: v1.54.2
          working-directory: ./src

      - name: Lint Dockerfile
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: ./Dockerfile

  test-scan:
    name: Build Image, Run Trivy & Update Go Modules
    needs: lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        # Enable Docker multi-platform builds      
        uses: docker/setup-buildx-action@v3

      - name: Build image for testing (amd64 only, local)
        # Build a single-arch (amd64) image and keep it local for scanning/testing      
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: linux/amd64
          tags: recipe-api:latest
          load: true  # Required so Trivy and Docker Compose can access the image

      - name: Install Trivy
        run: |
          sudo apt-get update
          sudo apt-get install -y wget apt-transport-https gnupg lsb-release
          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
          echo deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main | sudo tee /etc/apt/sources.list.d/trivy.list
          sudo apt-get update
          sudo apt-get install -y trivy

      - name: Run Trivy vulnerability scan
        # Run vulnerability scan using the Trivy scanner on the built image      
        run: trivy image --scanners vuln recipe-api:latest

      - name: Set up Go 1.23 (for updating dependencies only)
        # Use a newer Go version temporarily for compatibility with latest dependencies      
        uses: actions/setup-go@v4
        with:
          go-version: '1.23'

      - name: Update Go dependencies
        # Update all Go dependencies to their latest compatible versions      
        working-directory: ./src
        run: go get -u ./...

  integration-test:
    name: Run Integration Test
    needs: test-scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Start app and db using Docker Compose
        # Launch application and database defined in docker-compose.yml      
        run: docker compose up -d

      - name: Wait for app to be ready
        run: |
          for i in {1..10}; do
            if curl -s http://localhost:8080/health; then
              echo "App is ready."
              exit 0
            fi
            echo "Waiting for app to be ready..."
            sleep 3
          done
          echo "App did not become ready in time" >&2
          docker logs recipes-app
          exit 1

      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install Python test dependencies
        run: pip install requests

      - name: Run integration tests
        run: python3 api-test-example.py

  push-image:
    name: Push Multi-Arch Docker Image to GHCR
    needs: integration-test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up QEMU (for multi-arch builds)
        # Required to emulate and build for multiple architectures      
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        # Login to GHCR using token stored in repository secrets      
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_PAT }}

      - name: Push multi-arch Docker image
        # Build and push image for both amd64 and arm64 to GitHub Container Registry      
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ghcr.io/sdx-ci-cd/recipe-api:latest
